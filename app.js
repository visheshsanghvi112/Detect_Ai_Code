// app.js
const express = require('express');
const multer = require('multer');
const bodyParser = require('body-parser');
const path = require('path');
const fs = require('fs');

const app = express();
const port = 3000;

// Set up multer for file upload
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname)); // Unique filename
    }
});

const upload = multer({
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
    fileFilter: (req, file, cb) => {
        // Allow only text files, JavaScript, and Python
        const fileTypes = /text\/plain|application\/javascript|text\/x-python/;
        const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
        const mimeType = fileTypes.test(file.mimetype);

        if (extname && mimeType) {
            return cb(null, true);
        }
        cb(new Error('Only code files are allowed.'));
    }
}).single('file');

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('uploads'));

// Serve the HTML page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html')); // Assuming your HTML file is named index.html
});

// Handle file upload
app.post('/upload', (req, res) => {
    upload(req, res, (err) => {
        if (err) {
            return res.status(400).json({ error: err.message });
        }

        // Perform the analysis (mock analysis for this example)
        const filePath = path.join(__dirname, 'uploads', req.file.filename);
        fs.readFile(filePath, 'utf-8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Failed to read file' });
            }

            // Here you can add more logic for deeper analysis, such as checking for AI patterns or syntax
            const analysis = analyzeCode(data);

            // Return the response with analysis
            res.json({
                message: 'File uploaded successfully!',
                is_ai_generated: analysis.isAiGenerated,
                analysis: analysis.details
            });
        });
    });
});

// Mock function to analyze code (you can expand this with more complex logic)
function analyzeCode(code) {
    let isAiGenerated = false;
    let details = 'The file looks normal.';

    // Example mock check: Detect if the code includes certain patterns commonly found in AI-generated code
    if (code.includes('AI-generated-pattern')) {
        isAiGenerated = true;
        details = 'This code appears to be generated by an AI.';
    }

    return { isAiGenerated, details };
}

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
